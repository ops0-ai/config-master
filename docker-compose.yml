version: '3.8'

services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: config_management
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - config-management-network

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - config-management-network

  # Backend API
  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
    environment:
      NODE_ENV: production
      DB_HOST: database
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: config_management
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      MASTER_ENCRYPTION_KEY: ${MASTER_ENCRYPTION_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      PORT: 5005
      FRONTEND_URL: http://localhost:3000
      PEM_KEYS_DIR: /secure/pem-keys
    volumes:
      - pem_keys:/secure/pem-keys
      - ansible_temp:/tmp/ansible
    ports:
      - "5005:5005"
    depends_on:
      - database
      - redis
    networks:
      - config-management-network
    restart: unless-stopped

  # Frontend Web Application
  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: http://localhost:5005/api
    ports:
      - "3000:3000"
    depends_on:
      - api
    networks:
      - config-management-network
    restart: unless-stopped

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - web
      - api
    networks:
      - config-management-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pem_keys:
    driver: local
  ansible_temp:
    driver: local

networks:
  config-management-network:
    driver: bridge