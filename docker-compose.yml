services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: configmaster-db
    environment:
      POSTGRES_DB: config_management
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password123
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    # Database port should NOT be exposed publicly
    # Only expose if you need direct database access for debugging
    # ports:
    #   - "127.0.0.1:5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d config_management"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - config-management-network

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    # Redis port should NOT be exposed publicly
    # Only expose locally if needed for debugging
    # ports:
    #   - "127.0.0.1:6379:6379"
    networks:
      - config-management-network

  # Backend API
  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
    container_name: configmaster-api
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://postgres:password123@database:5432/config_management
      DB_HOST: database
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: password123
      DB_NAME: config_management
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY:-your-32-character-encryption-key}
      MASTER_ENCRYPTION_KEY: ${MASTER_ENCRYPTION_KEY:-your-master-key-for-pem-files}
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-}
      AWS_REGION: ${AWS_REGION:-us-east-1}
      GITHUB_CLIENT_ID: ${GITHUB_CLIENT_ID:-}
      GITHUB_CLIENT_SECRET: ${GITHUB_CLIENT_SECRET:-}
      PORT: 5005
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3000}
      ALLOW_SELF_HOSTED_CORS: ${ALLOW_SELF_HOSTED_CORS:-true}
      PEM_KEYS_DIR: /secure/pem-keys
    volumes:
      - pem_keys:/secure/pem-keys
      - ansible_temp:/tmp/ansible
      - ./uploads:/app/uploads
      - ./logs:/app/logs
      - ./mdm-agent:/app/mdm-agent
    ports:
      - "5005:5005"
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - config-management-network
    restart: unless-stopped

  # Frontend Web Application
  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
    container_name: configmaster-web
    env_file:
      - apps/web/.env
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:5005/api}
      NEXT_TELEMETRY_DISABLED: 1
    ports:
      - "3000:3000"
    depends_on:
      - api
    networks:
      - config-management-network
    restart: unless-stopped


volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pem_keys:
    driver: local
  ansible_temp:
    driver: local

networks:
  config-management-network:
    driver: bridge